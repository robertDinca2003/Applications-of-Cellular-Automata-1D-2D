name: C++ CI

on:
  push:
    branches: ['*']
    tags: ['*']
  pull_request:
    branches: ['*']
  workflow_dispatch:
    inputs:
      build_type:
        description: Build type
        required: false
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel

env:
  BUILD_TYPE: ${{ inputs.build_type || 'Debug' }}
  EXECUTABLE_NAME: "oop"
  INPUT_FILENAME: "tastatura.txt"
  BUILD_DIR: "build"
  EXT_DIR: "ext"
  BIN_DIR: "bin"
  GEN_DIR: "generated"
  APP_WINDOW: "My Window"
  OpenCV_DIR: "/usr/local/lib/cmake/opencv4" # Path to OpenCV CMake configuration

defaults:
  run:
    shell: bash

jobs:
  cppcheck:
    name: "Cppcheck"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install cppcheck
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends cppcheck

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        uses: ./.github/actions/install-linux-deps

      - name: Configure CMake
        uses: ./.github/actions/configure-cmake
        with:
          custom_flags: '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON'

      - name: Cppcheck
        run: |
          cppcheck --enable=all \
                   --inline-suppr \
                   --project="${BUILD_DIR}"/compile_commands.json \
                   -i"${BUILD_DIR}" --suppress='*:"${BUILD_DIR}"/*' \
                   -i"${EXT_DIR}" --suppress='*:"${EXT_DIR}"/*' \
                   -i"${GEN_DIR}" --suppress='*:"${GEN_DIR}"/*' \
                   --suppress=missingIncludeSystem \
                   --suppress=unmatchedSuppression \
                   --suppress=useStlAlgorithm \
                   --error-exitcode=1

  clang-tidy:
    name: "Clang-Tidy"
    runs-on: ubuntu-22.04
    env:
      CLANG_VER: 17
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup compiler env vars
        run: |
          echo "CC=clang-${CLANG_VER}" >> $GITHUB_ENV
          echo "CXX=clang++-${CLANG_VER}" >> $GITHUB_ENV

      - name: Install Clang ${{ env.CLANG_VER }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh ${CLANG_VER}

      - name: Install clang-tidy
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends clang-tidy-${{ env.CLANG_VER }} libc++-${{ env.CLANG_VER }}-dev libc++abi-${{ env.CLANG_VER }}-dev

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        uses: ./.github/actions/install-linux-deps

      - name: Configure CMake
        uses: ./.github/actions/configure-cmake
        with:
          custom_flags: '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON'

      - name: Clang-Tidy
        continue-on-error: true
        run: |
          sed -i "s|$(which ${CXX})|$(realpath $(which ${CXX}))|g" "${BUILD_DIR}"/compile_commands.json

          cat "${BUILD_DIR}"/compile_commands.json |
            jq -r '.[] | .file' |
            grep -v "/${BUILD_DIR}/_deps/" |
            xargs clang-tidy-${{ env.CLANG_VER }} -p "${BUILD_DIR}"

  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    permissions:
      contents: write

    env:
      CC: ${{ matrix.c }}
      CXX: ${{ matrix.cxx }}
      OpenCV_DIR: ${{ env.OpenCV_DIR }}

      SFML_VERSION: "2023-11-04-2.6.1"
      MINGW_CACHE_KEY: "gcc-12.3-msvcrt-r1"
      MINGW_VER: "12.3.0-16.0.4-11.0.0-msvcrt-r1/winlibs-x86_64-posix-seh-gcc-12.3.0-mingw-w64msvcrt-11.0.0-r1.7z"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            c: gcc-12
            cxx: g++-12
            name: "ASan: Ubuntu 22.04 GCC 12"
            cmake_flags: "-DUSE_ASAN=ON -DBUILD_SHARED_LIBS=FALSE"
            cmake_generator: Ninja
            runs_asan: true

          - os: ubuntu-22.04
            c: gcc-11
            cxx: g++-11
            name: "Valgrind: Ubuntu 22.04 GCC 11"
            cmake_flags: -DBUILD_SHARED_LIBS=FALSE
            cmake_generator: Ninja
            runs_valgrind: true

          - os: macos-12
            c: clang
            cxx: clang++
            name: "ASan: macOS 12 Apple Clang 14"
            cmake_flags: "-DUSE_ASAN=ON -DSFML_BUILD_FRAMEWORKS=FALSE -DSFML_DEPENDENCIES_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts -DBUILD_SHARED_LIBS=FALSE"

          - os: windows-2022
            c: cl
            cxx: cl
            name: "ASan: Windows 2022 MSVC 19.38"
            cmake_flags: "-DUSE_ASAN=ON -DBUILD_SHARED_LIBS=TRUE"

          - os: windows-2022
            c: gcc
            cxx: g++
            name: "Windows 2022 MinGW GCC 12"
            cmake_flags: -DBUILD_SHARED_LIBS=TRUE
            cmake_generator: Ninja

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare env
        run: |
          echo ${GITHUB_WORKSPACE}
          mkdir ${GITHUB_WORKSPACE}/artifacts

      - name: Set timestamp and zip name
        run: |
          echo "TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)" >> ${GITHUB_ENV}
          echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ env.BUILD_TYPE }}_${{ matrix.os }}_${{ matrix.cxx }}" | sed 's|/|_|')" >> ${GITHUB_ENV}

      - name: Install common Linux Dependencies
        if: runner.os == 'Linux'
        uses: ./.github/actions/install-linux-deps

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo sysctl vm.mmap_rnd_bits=28
          sudo apt-get install --no-install-recommends ninja-build xdotool openbox libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0

      - name: Install OpenCV (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends libopencv-dev

      - name: Install ninja (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ninja

      - name: Install OpenCV (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install opencv

      - name: Install valgrind
        if: runner.os == 'Linux' && matrix.runs_valgrind == true
        run: |
          sudo apt-get install --no-install-recommends valgrind

      - name: Cache tools
        uses: actions/cache@v4
        if: runner.os == 'Linux' && matrix.runs_msan == true
        id: cache-tools
        with:
          path: tools
          key: tools-clang-${{ matrix.clang_ver }}-stdlib-msan

      - name: Configure CMake
        uses: ./.github/actions/configure-cmake
        with:
          custom_flags: ${{ matrix.cmake_flags }}
          warnings_as_errors: 'ON'

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config ${{ env.BUILD_TYPE }}
